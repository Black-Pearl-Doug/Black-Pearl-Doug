# -*- coding: utf-8 -*-
"""The_Black_Pearl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rEbAhKm7UJNlx9lZ9gHCP-XGk6CuZCvr
"""

import matplotlib.pyplot as plt
import numpy as np
import time

# Define plot settings
fig, ax = plt.subplots(figsize=(10, 10))
ax.set_facecolor('black')
ax.axis('off')

# Plot the Black Cube
cube_center = (0, 0)
cube_size = 5
cube = plt.Rectangle(cube_center, cube_size, cube_size, color='black', edgecolor='white', lw=2)
ax.add_patch(cube)

# Plot the Black Pearl and Flying Dutchman
ships = [
    {'name': 'Black Pearl', 'x': -4, 'y': -4, 'color': 'white'},
    {'name': 'Flying Dutchman', 'x': 4, 'y': 4, 'color': 'blue'}
]

for ship in ships:
    ax.plot(ship['x'], ship['y'], marker='o', color=ship['color'], markersize=15)
    ax.text(ship['x'], ship['y'] - 1, ship['name'], color=ship['color'], ha='center')

# Plot the Stars of the Lid with a unique seed based on the current time
np.random.seed(int(time.time()) % 4294967296)  # Use current time for randomness
stars_x = np.random.uniform(-10, 10, 100)
stars_y = np.random.uniform(-10, 10, 100)
stars_size = np.random.uniform(5, 20, 100)

ax.scatter(stars_x, stars_y, color='white', s=stars_size, alpha=0.8)

# Show the plot
plt.show()

import plotly.graph_objects as go
import numpy as np

# Create figure
fig = go.Figure()

# Add the Black Cube
cube_x = [-2.5, -2.5, 2.5, 2.5, -2.5, -2.5, -2.5, 2.5, 2.5, -2.5, 2.5, 2.5]
cube_y = [-2.5, 2.5, 2.5, -2.5, -2.5, -2.5, -2.5, -2.5, 2.5, 2.5, 2.5, -2.5]
cube_z = [-2.5, -2.5, -2.5, -2.5, -2.5, 2.5, -2.5, -2.5, -2.5, -2.5, 2.5, -2.5]

fig.add_trace(go.Mesh3d(x=cube_x, y=cube_y, z=cube_z, color='black', opacity=0.5, name='Black Cube'))

# Plot the Stars of the Lid with a unique seed based on the current time
np.random.seed()  # Ensure different results each run
stars_x = np.random.uniform(-10, 10, 100)
stars_y = np.random.uniform(-10, 10, 100)
stars_z = np.random.uniform(-10, 10, 100)
stars_size = np.random.uniform(2, 8, 100)

fig.add_trace(go.Scatter3d(x=stars_x, y=stars_y, z=stars_z, mode='markers',
                           marker=dict(size=stars_size, color='white', opacity=0.8)))

# Randomly generate positions for the Black Pearl and Flying Dutchman
ships = [
    {'name': 'Black Pearl', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'z': np.random.uniform(-10, 10), 'color': 'white'},
    {'name': 'Flying Dutchman', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'z': np.random.uniform(-10, 10), 'color': 'blue'}
]

for ship in ships:
    fig.add_trace(go.Scatter3d(x=[ship['x']], y=[ship['y']], z=[ship['z']], mode='markers+text',
                               marker=dict(size=10, color=ship['color']),
                               text=ship['name'], textposition='bottom center'))

# Update layout
fig.update_layout(scene=dict(bgcolor='black',
                             xaxis=dict(color='white', gridcolor='white', zerolinecolor='white', showbackground=False),
                             yaxis=dict(color='white', gridcolor='white', zerolinecolor='white', showbackground=False),
                             zaxis=dict(color='white', gridcolor='white', zerolinecolor='white', showbackground=False)),
                  scene_aspectmode='cube',
                  title='The Black Pearl, The Flying Dutchman, and The Black Cube')

# Show the plot
fig.show()

import plotly.graph_objects as go
import numpy as np

# Define spirograph parameters
R = 10  # Radius of the fixed circle
r = 5   # Radius of the rotating circle
d = 5   # Distance from the center of the rotating circle

# Generate points for the spirograph
theta = np.linspace(0, 4 * np.pi, 2000)
x_spiro = (R - r) * np.cos(theta) + d * np.cos((R - r) * theta / r)
y_spiro = (R - r) * np.sin(theta) - d * np.sin((R - r) * theta / r)

# Create figure
fig = go.Figure()

# Add the spirogram trace
fig.add_trace(go.Scatter(x=x_spiro, y=y_spiro, mode='lines', line=dict(color='white'), name='Spirogram'))

# Plot the Stars of the Lid with a unique seed based on the current time
np.random.seed()  # Ensure different results each run
stars_x = np.random.uniform(-10, 10, 100)
stars_y = np.random.uniform(-10, 10, 100)

# Randomly generate positions for the Black Pearl and Flying Dutchman
ships = [
    {'name': 'Black Pearl', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'color': 'white'},
    {'name': 'Flying Dutchman', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'color': 'blue'}
]

# Add the ships to the 2D plot
for ship in ships:
    fig.add_trace(go.Scatter(x=[ship['x']], y=[ship['y']], mode='markers+text',
                             marker=dict(size=10, color=ship['color']),
                             text=ship['name'], textposition='bottom center'))

# Add the stars (in 2D context)
fig.add_trace(go.Scatter(x=stars_x, y=stars_y, mode='markers',
                         marker=dict(size=stars_size, color='white', opacity=0.8), name='Stars of the Lid'))

# Update layout for the black background, white grid lines, and square graticules
fig.update_layout(
    plot_bgcolor='black',
    xaxis=dict(showgrid=True, gridcolor='white', color='white', scaleanchor='y', scaleratio=1, zeroline=False),
    yaxis=dict(showgrid=True, gridcolor='white', color='white', scaleanchor='x', scaleratio=1, zeroline=False),
    title='The Black Pearl, The Flying Dutchman, and the Spirogram',
    showlegend=False,
    width=800,
    height=800
)

# Show the plot
fig.show()



import matplotlib.pyplot as plt
import numpy as np

# Define plot settings
fig, ax = plt.subplots(figsize=(10, 10))
ax.set_facecolor('black')
ax.axis('off')

# Plot the Black Cube
cube_center = (0, 0)
cube_size = 5
cube = plt.Rectangle(cube_center, cube_size, cube_size, color='black', edgecolor='white', lw=2)
ax.add_patch(cube)

# Plot the Black Pearl and Flying Dutchman
ships = [
    {'name': 'Black Pearl', 'x': -4, 'y': -4, 'color': 'white'},
    {'name': 'Flying Dutchman', 'x': 4, 'y': 4, 'color': 'blue'}
]

for ship in ships:
    ax.plot(ship['x'], ship['y'], marker='o', color=ship['color'], markersize=15)
    ax.text(ship['x'], ship['y'] - 1, ship['name'], color=ship['color'], ha='center')

# Plot the Stars of the Lid
np.random.seed(42)
stars_x = np.random.uniform(-10, 10, 100)
stars_y = np.random.uniform(-10, 10, 100)
stars_size = np.random.uniform(5, 20, 100)

ax.scatter(stars_x, stars_y, color='white', s=stars_size, alpha=0.8)

# Show the plot
plt.show()

import plotly.graph_objects as go
import numpy as np

# Create figure
fig = go.Figure()

# Add the Black Cube
cube_x = [-2.5, -2.5, 2.5, 2.5, -2.5, -2.5, -2.5, 2.5, 2.5, -2.5, 2.5, 2.5]
cube_y = [-2.5, 2.5, 2.5, -2.5, -2.5, -2.5, -2.5, -2.5, 2.5, 2.5, 2.5, -2.5]
cube_z = [-2.5, -2.5, -2.5, -2.5, -2.5, 2.5, -2.5, -2.5, -2.5, -2.5, 2.5, -2.5]

fig.add_trace(go.Mesh3d(x=cube_x, y=cube_y, z=cube_z, color='black', opacity=0.5, name='Black Cube'))

# Add the Black Pearl and Flying Dutchman
ships = [
    {'name': 'Black Pearl', 'x': -4, 'y': -4, 'z': -4, 'color': 'white'},
    {'name': 'Flying Dutchman', 'x': 4, 'y': 4, 'z': 4, 'color': 'blue'}
]

for ship in ships:
    fig.add_trace(go.Scatter3d(x=[ship['x']], y=[ship['y']], z=[ship['z']], mode='markers+text',
                               marker=dict(size=10, color=ship['color']),
                               text=ship['name'], textposition='bottom center'))

# Add the Stars of the Lid
np.random.seed()  # Ensure different results each run
stars_x = np.random.uniform(-10, 10, 100)
stars_y = np.random.uniform(-10, 10, 100)
stars_z = np.random.uniform(-10, 10, 100)
stars_size = np.random.uniform(2, 8, 100)

fig.add_trace(go.Scatter3d(x=stars_x, y=stars_y, z=stars_z, mode='markers',
                           marker=dict(size=stars_size, color='white', opacity=0.8)))

# Update layout
fig.update_layout(scene=dict(bgcolor='black'),
                  scene_aspectmode='cube',
                  title='The Black Pearl, The Flying Dutchman, and The Black Cube')

# Show the plot
fig.show()

import plotly.graph_objects as go
import numpy as np

# Create figure
fig = go.Figure()

# Add the Black Cube
cube_x = [-2.5, -2.5, 2.5, 2.5, -2.5, -2.5, -2.5, 2.5, 2.5, -2.5, 2.5, 2.5]
cube_y = [-2.5, 2.5, 2.5, -2.5, -2.5, -2.5, -2.5, -2.5, 2.5, 2.5, 2.5, -2.5]
cube_z = [-2.5, -2.5, -2.5, -2.5, -2.5, 2.5, -2.5, -2.5, -2.5, -2.5, 2.5, -2.5]

fig.add_trace(go.Mesh3d(x=cube_x, y=cube_y, z=cube_z, color='black', opacity=0.5, name='Black Cube'))

# Plot the Stars of the Lid with a unique seed based on the current time
np.random.seed()  # Ensure different results each run
stars_x = np.random.uniform(-10, 10, 100)
stars_y = np.random.uniform(-10, 10, 100)
stars_z = np.random.uniform(-10, 10, 100)
stars_size = np.random.uniform(2, 8, 100)

fig.add_trace(go.Scatter3d(x=stars_x, y=stars_y, z=stars_z, mode='markers',
                           marker=dict(size=stars_size, color='white', opacity=0.8)))

# Randomly generate positions for the Black Pearl and Flying Dutchman
ships = [
    {'name': 'Black Pearl', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'z': np.random.uniform(-10, 10), 'color': 'white'},
    {'name': 'Flying Dutchman', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'z': np.random.uniform(-10, 10), 'color': 'blue'}
]

for ship in ships:
    fig.add_trace(go.Scatter3d(x=[ship['x']], y=[ship['y']], z=[ship['z']], mode='markers+text',
                               marker=dict(size=10, color=ship['color']),
                               text=ship['name'], textposition='bottom center'))

# Update layout
fig.update_layout(scene=dict(bgcolor='black'),
                  scene_aspectmode='cube',
                  title='The Black Pearl, The Flying Dutchman, and The Black Cube')

# Show the plot
fig.show()

import matplotlib.pyplot as plt
import numpy as np

# Define spirograph parameters
R = 10  # Radius of the fixed circle
r = 5   # Radius of the rotating circle
d = 5   # Distance from the center of the rotating circle

# Generate points for the spirograph
theta = np.linspace(0, 2 * np.pi, 1000)
x = (R - r) * np.cos(theta) + d * np.cos((R - r) * theta / r)
y = (R - r) * np.sin(theta) - d * np.sin((R - r) * theta / r)

# Plot the spirograph
fig, ax = plt.subplots(figsize=(8, 8))
ax.plot(x, y, color='white')
ax.set_facecolor('black')
ax.axis('off')
ax.set_aspect('equal', 'box')

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Define spirograph parameters
R = 10  # Radius of the fixed circle
r = 5   # Radius of the rotating circle
d = 5   # Distance from the center of the rotating circle

# Generate points for the spirograph
theta = np.linspace(0, 2 * np.pi, 1000)
x = (R - r) * np.cos(theta) + d * np.cos((R - r) * theta / r)
y = (R - r) * np.sin(theta) - d * np.sin((R - r) * theta / r)

# Plot the spirograph
fig, ax = plt.subplots(figsize=(8, 8))
ax.plot(x, y, color='white')
ax.set_facecolor('black')
ax.axis('off')
ax.set_aspect('equal', 'box')

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Define spirograph parameters
R = 10  # Radius of the fixed circle
r = 5   # Radius of the rotating circle
d = 5   # Distance from the center of the rotating circle

# Generate points for the spirograph
theta = np.linspace(0, 2 * np.pi, 1000)
x = (R - r) * np.cos(theta) + d * np.cos((R - r) * theta / r)
y = (R - r) * np.sin(theta) - d * np.sin((R - r) * theta / r)

# Plot the spirograph
fig, ax = plt.subplots(figsize=(8, 8))
ax.plot(x, y, color='white')
ax.set_facecolor('black')
ax.axis('off')
ax.set_aspect('equal', 'box')

# Show the plot
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

# Define spirograph parameters
R = 10  # Radius of the fixed circle
r = 5   # Radius of the rotating circle
d = 5   # Distance from the center of the rotating circle

# Generate points for the spirograph
theta = np.linspace(0, 2 * np.pi, 1000)
x = (R - r) * np.cos(theta) + d * np.cos((R - r) * theta / r)
y = (R - r) * np.sin(theta) - d * np.sin((R - r) * theta / r)

# Plot the spirograph
fig, ax = plt.subplots(figsize=(8, 8))
ax.plot(x, y, color='white')
ax.set_facecolor('black')
ax.axis('off')
ax.set_aspect('equal', 'box')

# Show the plot
plt.show()

import plotly.graph_objects as go
import numpy as np

# Define spirograph parameters
R = 10  # Radius of the fixed circle
r = 5   # Radius of the rotating circle
d = 5   # Distance from the center of the rotating circle

# Generate points for the spirograph
theta = np.linspace(0, 2 * np.pi, 1000)
x = (R - r) * np.cos(theta) + d * np.cos((R - r) * theta / r)
y = (R - r) * np.sin(theta) - d * np.sin((R - r) * theta / r)

# Create a plotly figure
fig = go.Figure()

# Add the spirogram trace
fig.add_trace(go.Scatter(x=x, y=y, mode='lines', line=dict(color='white')))

# Update layout for the black background and white grid lines
fig.update_layout(
    plot_bgcolor='black',
    xaxis=dict(showgrid=True, gridcolor='white', color='white'),
    yaxis=dict(showgrid=True, gridcolor='white', color='white')
)

# Show the plot
fig.show()

import plotly.graph_objects as go
import numpy as np
import time

# Define spirograph parameters
R = 10  # Radius of the fixed circle
r = 5   # Radius of the rotating circle
d = 5   # Distance from the center of the rotating circle

# Generate points for the spirograph
theta = np.linspace(0, 4 * np.pi, 2000)
x_spiro = (R - r) * np.cos(theta) + d * np.cos((R - r) * theta / r)
y_spiro = (R - r) * np.sin(theta) - d * np.sin((R - r) * theta / r)

# Create figure
fig = go.Figure()

# Add the spirogram trace
fig.add_trace(go.Scatter(x=x_spiro, y=y_spiro, mode='lines', line=dict(color='white'), name='Spirogram'))

# Plot the Stars of the Lid with a unique seed based on the current time
np.random.seed()  # Ensure different results each run
stars_x = np.random.uniform(-10, 10, 100)
stars_y = np.random.uniform(-10, 10, 100)
stars_z = np.random.uniform(-10, 10, 100)
stars_size = np.random.uniform(2, 8, 100)

# Randomly generate positions for the Black Pearl and Flying Dutchman
ships = [
    {'name': 'Black Pearl', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'z': np.random.uniform(-10, 10), 'color': 'white'},
    {'name': 'Flying Dutchman', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'z': np.random.uniform(-10, 10), 'color': 'blue'}
]

# Add the ships to the 2D plot (ignore z-coordinate)
for ship in ships:
    fig.add_trace(go.Scatter(x=[ship['x']], y=[ship['y']], mode='markers+text',
                             marker=dict(size=10, color=ship['color']),
                             text=ship['name'], textposition='bottom center'))

# Add the stars (in 2D context)
fig.add_trace(go.Scatter(x=stars_x, y=stars_y, mode='markers',
                         marker=dict(size=stars_size, color='white', opacity=0.8), name='Stars of the Lid'))

# Update layout for the black background and white grid lines
fig.update_layout(
    plot_bgcolor='black',
    xaxis=dict(showgrid=True, gridcolor='white', color='white'),
    yaxis=dict(showgrid=True, gridcolor='white', color='white'),
    title='The Black Pearl, The Flying Dutchman, and the Spirogram',
    showlegend=False
)

# Show the plot
fig.show()

import plotly.graph_objects as go
import numpy as np
import time

# Define spirograph parameters
R = 10  # Radius of the fixed circle
r = 5   # Radius of the rotating circle
d = 5   # Distance from the center of the rotating circle

# Generate points for the spirograph
theta = np.linspace(0, 4 * np.pi, 2000)
x_spiro = (R - r) * np.cos(theta) + d * np.cos((R - r) * theta / r)
y_spiro = (R - r) * np.sin(theta) - d * np.sin((R - r) * theta / r)

# Create figure
fig = go.Figure()

# Add the spirogram trace
fig.add_trace(go.Scatter(x=x_spiro, y=y_spiro, mode='lines', line=dict(color='white'), name='Spirogram'))

# Plot the Stars of the Lid with a unique seed based on the current time
np.random.seed()  # Ensure different results each run
stars_x = np.random.uniform(-10, 10, 100)
stars_y = np.random.uniform(-10, 10, 100)

# Randomly generate positions for the Black Pearl and Flying Dutchman
ships = [
    {'name': 'Black Pearl', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'color': 'white'},
    {'name': 'Flying Dutchman', 'x': np.random.uniform(-10, 10), 'y': np.random.uniform(-10, 10), 'color': 'blue'}
]

# Add the ships to the 2D plot
for ship in ships:
    fig.add_trace(go.Scatter(x=[ship['x']], y=[ship['y']], mode='markers+text',
                             marker=dict(size=10, color=ship['color']),
                             text=ship['name'], textposition='bottom center'))

# Add the stars (in 2D context)
fig.add_trace(go.Scatter(x=stars_x, y=stars_y, mode='markers',
                         marker=dict(size=stars_size, color='white', opacity=0.8), name='Stars of the Lid'))

# Update layout for the black background, white grid lines, and square graticules
fig.update_layout(
    plot_bgcolor='black',
    xaxis=dict(showgrid=True, gridcolor='white', color='white', scaleanchor='y', scaleratio=1),
    yaxis=dict(showgrid=True, gridcolor='white', color='white', scaleanchor='x', scaleratio=1),
    title='The Black Pearl, The Flying Dutchman, and the Spirogram',
    showlegend=False
)

# Show the plot
fig.show()

